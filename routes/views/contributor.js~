var keystone = require('keystone');

exports = module.exports = function(req, res) {
	
	var view = new keystone.View(req, res);
	var locals = res.locals;

	//post categories - or rather types. grab from the admin console.
	var hot = '5603ccd1c76d43f64cdfb8e2';
	var headline = '560525db32be16ec52c7fe09';
	var top3 = '560536921f4ef90953b4a1e7';
	var textarticle = '56054db2429768e556442ce6';
	var unlisted = '560fea99754d026b11321dc2';

	locals.section = 'contributor';
	locals.headline = 'Site headline';
	locals.data = {
		topics: [],
		hot: [],
		posts: [],
		featurelink: []
	};
	locals.username = 'none';
	locals.bio = 'none';
	locals.email = 'none';
	locals.users = [];
	
	view.on('get', function(next) { //replaced .on('init') with this, which is called every time instead of only the first
		//probably even better, set up the topics and categories in init, then only overwrite them here if they're empty.
		keystone.list('PostTopic').model.find().exec(function(err, results) { 
			// when topics gets too many, gonna have to limit the low importance ones & sort by date.
			results.forEach(function (result) {
				if (!result.icons) result.icons = 'none';
			});
			locals.data.topics = results; 		
			});
		keystone.list('Post').model.find()
			.where('state','published')
			.where('categories').nin([top3, headline, textarticle, unlisted])
			.sort('-views').limit('5')
			.exec(function(err, results) {
			locals.data.hot = results; });
		keystone.list('Post').model.find().where('categories').in([featurelink])
			.where('state','published')
			.sort('-views').limit('4')
			.exec(function(err, results) {
			locals.data.featurelink = results; });
		keystone.list('Post').model.find().where('categories').in([headline])
			.where('state','published')
			.sort('-publishedDate').exec(function(err, results) {
			locals.headline = results[0].title; });
		if (req.params.name) {
			var firstname = req.params.name.split(' ')[0];
			var lastname = req.params.name.split(' ')[1];
			var q = keystone.list('User').model.findOne({
				isAdmin: 'false',
				name: {last: lastname, first: firstname}
				});
			q.exec(function(err, result) {
				if (result) { 
					result.bio=result.bio.replace(/&lt;/g,'<');
					result.bio=result.bio.replace(/&gt;/g,'>');
					result.bio=result.bio.replace(/<img src="(?!http)/g, '<img src="http://localhost:3000/uploads/');
					locals.username = result.name;
					locals.bio = result.bio;
					locals.pic = result.pic;
					locals.email = result.email;
					keystone.list('Post').model.find().where('author').in([result])
					.where('state','published')
					.sort('-publishedDate').exec(function(err2, results) {
					locals.data.posts = results; next(err2); });
				}
				//next(err);
			});
		} // end if there was a specific user in the request.
		else {
			keystone.list('User').model.find()
			.where('isAdmin',false)
			.sort('name') //it'd be super cool to sort this by no of posts instead of alphabetically (called 'relationships' by keystone)
			.exec(function(err, results) {
				locals.username = 'many';
				locals.users = results; 
				next(err);
				});
			
		} // end no specific user specified so we just returned them all
			
	}); // end on view.get

	

	// Render the view
	view.render('contributor');
	
};
